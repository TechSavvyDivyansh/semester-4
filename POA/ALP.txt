NOTEðŸ’£ :Don't add indentation in code.It will not run on emulator. I have added just for understanding 



;Bubble sort 
;ACSENDING


DATA SEGMENT
     STRING1 DB 99H,12H,56H,45H,36H
DATA ENDS
 
CODE SEGMENT

ASSUME CS:CODE,DS:DATA                      ;This is for Assembler ,DS segment DATA naam ka jo segment hain usko refer kare
START    : MOV AX,DATA
           MOV DS,AX
           MOV CH,04H                       ;i loop. Last one need not be compared as it already gets on the correct position
	   
	   UP2: MOV CL,04H                  ;j loop. Last one need not be compared as it already gets on the correct position
		LEA SI,STRING1

	   UP1: MOV AL,[SI]                 ;SI ka address me jo value hain wo AL
		MOV BL,[SI+1]
		CMP AL,BL
		JC DOWN                     ;99,12(99>12) no jump
	
		MOV DL,[SI+1]  ;DS*10+SI+1
		XCHG [SI],DL
		MOV [SI+1],DL

	   DOWN: INC SI
		 DEC CL
		 JNZ UP1
		 DEC CH
		 JNZ UP2
 
CODE ENDS
END START







;SIMILARLY
;DESCENDING 

DATA SEGMENT
	STRING1 DB 99H,12H,56H,45H,36H
DATA ENDS

CODE SEGMENT

ASSUME CS:CODE,DS:DATA
start    : MOV AX,DATA
	   MOV DS,AX

	   MOV CH,04H

	   UP2: MOV CL,04H
	   LEA SI,STRING1

	   UP1: MOV AL,[SI]
	        MOV BL,[SI+1]
	        CMP AL,BL
	        JNC DOWN
	    
	        MOV DL,[SI+1]
	        XCHG [SI],DL
	        MOV [SI+1],DL

	     DOWN: INC SI
		   DEC CL
		   JNZ UP1
		   DEC CH
		   JNZ UP2

CODE ENDS
END START





;DATA COPY FROM ONE SEGMENT TO OTHER SEGMENT
; multi-segment executable file template

data segment
    seg1 db 1h ,2h ,3h
ends

extra segment
    seg2 db ?
ends

code segment

start:
	mov ax, data
	mov ds, ax
	mov ax, extra
	mov es, ax
	
	lea si , seg1
	lea di , seg2 
	mov cx, 03h                     ;for loop for 3 values
	transfer: mov ah,ds:[si]               ;its like index number as we do in array 
		  mov es:[di],ah

	inc si
	inc di
	dec cx 
	jnz transfer
	int 3

ends
end start ; set entry point and stop the assembler.







;SORT USING MACRO

sort macro 
	MOV CH,04H
	 
	UP2: MOV CL,04H
	     LEA SI,STRING1
	 
	UP1: MOV AL,[SI]
	     MOV BL,[SI+1]
	     CMP AL,BL
	     JC DOWN

	     MOV DL,[SI+1]
	     XCHG [SI],DL
	     MOV [SI+1],DL
	 
	DOWN: INC SI
	      DEC CL
	      JNZ UP1
	      DEC CH
	      JNZ UP2 
endm


DATA SEGMENT
	STRING1 DB 99H,12H,56H,45H,36H
DATA ENDS
 
CODE SEGMENT

	ASSUME CS:CODE,DS:DATA
	START: MOV AX,DATA
	       MOV DS,AX
	       sort 

CODE ENDS

END START






;MAX MIN

DATA SEGMENT
	ARR DB 5,3,7,1,9,2,6,8,4
	LEN DW $-ARR ;calculate length of array
	MIN DB ?
	MAX DB ?
DATA ENDS

CODE SEGMENT
		ASSUME DS:DATA CS:CODE
		START:
			MOV AX,DATA
			MOV DS,AX

			LEA SI,ARR
			MOV AL,ARR[SI] ;indexing
			MOV MIN,AL
			MOV MAX,AL
	
			MOV CX,LEN
			REPEAT:
				MOV AL,ARR[SI]
				CMP MIN,AL
				JL CHECKMAX   ;if Value in AL is not lower than Min jump.
	
				MOV MIN,AL
			CHECKMAX:
				CMP MAX,AL
				JG DONE        ;if value in AL is not greater that max jump
	
				MOV MAX,AL
			DONE:
				INC SI
				LOOP REPEAT
	
			MOV AH,4CH  ;code for 
			INT 21H
CODE ENDS
END START




;ADD

MOV AX,[1000h]
MOV BX,[1002h]
MOV CL,00h
ADD AX,BX 

MOV [1004h],AX
JNC jump 

INC CL
jump:
	MOV [1006h],CL
HLT



;FACTORIAL

DATA SEGMENT
NUM DB 5
fact DB ?
DATA ENDS
CODE SEGMENT
         ASSUME DS:DATA,CS:CODE
START:
      MOV AX,DATA
      MOV DS,AX
      MOV AH,00
      MOV AL,NUM

 L1:  DEC NUM
      MUL NUM            ;mul num with AL
      MOV CL,NUM
      CMP CL,01
      JNZ L1
      MOV fact, AL 

CODE ENDS
END START






;FACTORIAL USING MACRO

fact macro f
    up:
    mul f
    dec f
    jnz up
endm

data segment
    num dw 05h
    result dw ?
ends

stack segment
    dw 128 dup(0)
ends

code segment
    start:
	    mov ax,data
	    mov ds,ax
	    mov cx,num
	    
	    mov ax, 0001h
	    fact num
	    mov result,ax
ends






;INTERRUPTS

data segment
    MSG DB "Enter:$"
    data ends

code segment
    assume cs:code, ds:data
    start: 
   
	    mov ax,data
	    mov ds,ax
	    lea DX,MSG                
	    MOV AH,09h
	    INT 21H
	    
	    mov ah,01
	    int 21h 
	        
	    mov dl,al
	    mov ah,02
	    int 21h 
	    
	    mov ah,4ch
	    int 21h
    code ends
end start



